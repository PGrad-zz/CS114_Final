Focus: Rendering
Idea 1: Soap bubbles w/ marching cubes OR ray-marching, reflections, and refraction
Steps:
	1. Implement marching cubes on metaballs within WebGL
		Time to implement: 1 week?
		Dependencies: Get basic scene set up in WebGL
		-Exist resources on how to do so (eg. Jamie Wong)
		I. Load cube into webgl
		II. Render front-facing and back-facing triangles into position
		III. Create textures for front-facing and back-facing positions
		IV. Map ray directions
		V. Do ray-marching to sample within 3d texture
	2. Extract "optical properties", mainly normals from isocurves
		I. Perturb position in SDF on x, y, z, calc the difference
	3. Do environment mapping for reflections
		I. CS112 hw4, remember? Use cube maps
		II. Alpha blending for translucency
	4. Apply a refraction model, possibly one of the two from gpu gems
	5. Thin film interference diffraction model
		I. Modification of diffraction shader from gpu gems
	6. Animation/Movement
		Move centers around randomly, check if outside bounds - use SAT?

	Concepts employed: volumetric rendering with marching cubes, metaballs, reflection, refraction, diffraction
Medium novelty

cube maps != volumetric textures

Focus: Rendering
Idea 2: Clouds with volumetric rendering (ray-marching into 3d texture)
	1. Either abandon WebGL or come with a way of adding 3d texture support (difficult, not relevant to problem)
	2. Create basic cloud model with 3d texture and volumetric render
		I. Load in 3d texture
		II. Create textures for front-facing and back-facing positions
		III. Map ray directions
		IV. Do ray-marching to sample within 3d texture
	3. Apply models of extinction and scattering
	4. Figure out how to dynamic clouds and inner shadowing

	Concepts employed: volumetric rendering with ray-marching and 3d textures, particulate optics
	High novelty
